// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from config.djinni

#import "STConnectionType.h"
#import "STServerSelection.h"
#import <Foundation/Foundation.h>
@class STConfig;
@protocol STConfigHandler;


/**
 * A configuration that has been validated to run tasks. Validated configurations are fetched from
 * the network, but overrides can be provided via the Config object passed to the validate call. An
 * instance of this class can be used to start multiple task managers. Validated configurations can
 * be configured to re-fetch under the following conditions:
 * - After a certain amount of time after it has been fetched.
 * - When the network changes.
 * - After the device has moved a certain amount of distance from where it was fetched.
 */
@interface STValidatedConfig : NSObject

/**
 * Fetches the config from the network with the provided Config's name. Validates the config,
 * filling in the values not yet configured in the passed Config with the values fetched from
 * the configuration service. If the provided config object contains incorrectly configured
 * parameters, they will be overridden in the validation process. This method won't work when
 * there's no available network.
 */
+ (void)validate:(nullable STConfig *)config
         handler:(nullable id<STConfigHandler>)handler;

/**
 * Return the actual validated configuration. This is a copy of the configuration, so any changes to the 
 * returned instance won't affect the validated configuration used for the test.
 */
- (nullable STConfig *)getConfiguration;

/** Returns the server selection details. */
- (nonnull NSArray<STServerSelection *> *)getServerSelectionDetails;

/**
 * Get the name of the network provider for the test. This is either the name of 
 * the ISP for wifi or other non-cellular connections, or the carrier name. 
 * The carrier name can differ from the value returned by getCarrierName(). 
 * When available, this is the best option for displaying the name of the network provider to users.
 */
- (nullable NSString *)getProviderDisplayName;

/** Get the name of the ISP the device is connected with. */
- (nonnull NSString *)getISPName;

/** Get the name of the carrier used for the connection. */
- (nullable NSString *)getCarrierName;

/** Get the raw name of the carrier used for the connection. */
- (nullable NSString *)getCarrierNameRaw;

/** Get the ISO country code of the carrier used for the connection. */
- (nullable NSString *)getISOCountryCode;

/** Get the MCC of the carrier as determined via config. */
- (nullable NSString *)getCarrierMcc;

/** Get the MNC of the carrier as determined via config. */
- (nullable NSString *)getCarrierMnc;

/** Get the connection type captured at the time of config request */
- (STConnectionType)getConnectionType;

@end
