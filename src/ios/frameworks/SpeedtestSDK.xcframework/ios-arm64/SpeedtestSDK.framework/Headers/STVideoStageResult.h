// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from video.djinni

#import "STAssetUrl.h"
#import "STTimeout.h"
#import "STVideoPlayerEventWithTime.h"
#import "STVideoStageError.h"
#import "STVideoTestStageType.h"
#import <Foundation/Foundation.h>

/** Result of a video test stage. */
@interface STVideoStageResult : NSObject
- (nonnull instancetype)init NS_UNAVAILABLE;
+ (nonnull instancetype)new NS_UNAVAILABLE;
- (nonnull instancetype)initWithStageType:(STVideoTestStageType)stageType
                                      url:(nonnull STAssetUrl *)url
                                     colo:(nullable NSString *)colo
                              startTimeMs:(int64_t)startTimeMs
                                endTimeMs:(int64_t)endTimeMs
                             firstFrameMs:(nullable NSNumber *)firstFrameMs
                            elapsedTimeMs:(nullable NSNumber *)elapsedTimeMs
                       timeToFirstFrameMs:(nullable NSNumber *)timeToFirstFrameMs
                             startBitrate:(int32_t)startBitrate
                           startRendition:(nonnull NSString *)startRendition
                               endBitrate:(int32_t)endBitrate
                             endRendition:(nonnull NSString *)endRendition
                          renditionShifts:(int32_t)renditionShifts
                              meanBitrate:(nullable NSNumber *)meanBitrate
              expectedMaxRenditionBitrate:(int32_t)expectedMaxRenditionBitrate
                   maxRenditionPercentage:(int32_t)maxRenditionPercentage
                didMeetExpectedResolution:(BOOL)didMeetExpectedResolution
                      renditionTimeTotals:(nonnull NSDictionary<NSNumber *, NSNumber *> *)renditionTimeTotals
                       advanceCriteriaMet:(BOOL)advanceCriteriaMet
                                  stallMs:(int64_t)stallMs
                               stallRatio:(nullable NSNumber *)stallRatio
                         bufferPercentage:(nullable NSNumber *)bufferPercentage
                   playerResolutionHeight:(int32_t)playerResolutionHeight
                    playerResolutionWidth:(int32_t)playerResolutionWidth
                         maximumRendition:(nonnull NSString *)maximumRendition
                  maximumRenditionBitrate:(int32_t)maximumRenditionBitrate
                      mostCommonRendition:(nonnull NSString *)mostCommonRendition
                                  timeout:(nullable NSNumber *)timeout
                             playerEvents:(nonnull NSArray<STVideoPlayerEventWithTime *> *)playerEvents
                     meanIndicatedBitrate:(int32_t)meanIndicatedBitrate
                                    error:(nullable STVideoStageError *)error NS_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)VideoStageResultWithStageType:(STVideoTestStageType)stageType
                                                  url:(nonnull STAssetUrl *)url
                                                 colo:(nullable NSString *)colo
                                          startTimeMs:(int64_t)startTimeMs
                                            endTimeMs:(int64_t)endTimeMs
                                         firstFrameMs:(nullable NSNumber *)firstFrameMs
                                        elapsedTimeMs:(nullable NSNumber *)elapsedTimeMs
                                   timeToFirstFrameMs:(nullable NSNumber *)timeToFirstFrameMs
                                         startBitrate:(int32_t)startBitrate
                                       startRendition:(nonnull NSString *)startRendition
                                           endBitrate:(int32_t)endBitrate
                                         endRendition:(nonnull NSString *)endRendition
                                      renditionShifts:(int32_t)renditionShifts
                                          meanBitrate:(nullable NSNumber *)meanBitrate
                          expectedMaxRenditionBitrate:(int32_t)expectedMaxRenditionBitrate
                               maxRenditionPercentage:(int32_t)maxRenditionPercentage
                            didMeetExpectedResolution:(BOOL)didMeetExpectedResolution
                                  renditionTimeTotals:(nonnull NSDictionary<NSNumber *, NSNumber *> *)renditionTimeTotals
                                   advanceCriteriaMet:(BOOL)advanceCriteriaMet
                                              stallMs:(int64_t)stallMs
                                           stallRatio:(nullable NSNumber *)stallRatio
                                     bufferPercentage:(nullable NSNumber *)bufferPercentage
                               playerResolutionHeight:(int32_t)playerResolutionHeight
                                playerResolutionWidth:(int32_t)playerResolutionWidth
                                     maximumRendition:(nonnull NSString *)maximumRendition
                              maximumRenditionBitrate:(int32_t)maximumRenditionBitrate
                                  mostCommonRendition:(nonnull NSString *)mostCommonRendition
                                              timeout:(nullable NSNumber *)timeout
                                         playerEvents:(nonnull NSArray<STVideoPlayerEventWithTime *> *)playerEvents
                                 meanIndicatedBitrate:(int32_t)meanIndicatedBitrate
                                                error:(nullable STVideoStageError *)error;

/** The type of stage, adaptive or fixed bitrate.  */
@property (nonatomic, readonly) STVideoTestStageType stageType;

/** URL of the asset played during the stage. */
@property (nonatomic, readonly, nonnull) STAssetUrl * url;

/** Colocation of the test. */
@property (nonatomic, readonly, nullable) NSString * colo;

/** The monotonic time in milliseconds in which the stage has started to run. */
@property (nonatomic, readonly) int64_t startTimeMs;

/** The monotonic time in milliseconds in which the stage has completed. */
@property (nonatomic, readonly) int64_t endTimeMs;

/** The monotonic time in milliseconds in which the first frame rendered. */
@property (nonatomic, readonly, nullable) NSNumber * firstFrameMs;

/** The elapsed time in milliseconds between firstFrameMs and endTimeMs. */
@property (nonatomic, readonly, nullable) NSNumber * elapsedTimeMs;

/** Elapsed time in milliseconds from when the stage began until the player rendered its first frame. */
@property (nonatomic, readonly, nullable) NSNumber * timeToFirstFrameMs;

/** The rendition bitrate of the video player when the video player has started to render. */
@property (nonatomic, readonly) int32_t startBitrate;

/** The start rendition of the video player which corresponds to the startBitrate. */
@property (nonatomic, readonly, nonnull) NSString * startRendition;

/** The final rendition bitrate of the video player when playback has concluded. */
@property (nonatomic, readonly) int32_t endBitrate;

/** The end rendition of the video player which corresponds to the [endBitrate]. */
@property (nonatomic, readonly, nonnull) NSString * endRendition;

/** The number of times a rendition bitrate changed. */
@property (nonatomic, readonly) int32_t renditionShifts;

/**
 * Total number of bits transferred over total transfer time in seconds. For iOS, this is reported via
 * [observedBitrate](https://developer.apple.com/documentation/avfoundation/avplayeritemaccesslogevent/1390804-observedbitrate)
 */
@property (nonatomic, readonly, nullable) NSNumber * meanBitrate;

/**
 * The expected max bitrate tenable by the player's resolution compared against known configured
 * renditions. 1280x720 player should be able to play the 720p rendition for example. Refer to
 * the Ookla methodology document for more information on the calculation.
 */
@property (nonatomic, readonly) int32_t expectedMaxRenditionBitrate;

/**
 * Percentage of time spent playing a rendition greater than or equal to
 * expectedMaxRenditionBitrate. This is unique to an ABR stage result.
 */
@property (nonatomic, readonly) int32_t maxRenditionPercentage;

/**
 * Whether or not the highest resolution of the stage met or exceeded the expected max ABR
 * resolution of the device. Primarily used for fixed stages to determine if they meet
 * the resolution for the device.
 */
@property (nonatomic, readonly) BOOL didMeetExpectedResolution;

/**
 * Accumulated play time for each rendition bitrate observed where key is the bitrate and the
 * value is the play time in milliseconds.
 */
@property (nonatomic, readonly, nonnull) NSDictionary<NSNumber *, NSNumber *> * renditionTimeTotals;

/**
 * Advancement criteria met:
 * Percentage of time spent playing the highest resolution rendition supported by the player
 * maxRenditionPercentage was greater than the configured advancePercentage
 */
@property (nonatomic, readonly) BOOL advanceCriteriaMet;

/** Amount of time the video player spent in a stalled state. */
@property (nonatomic, readonly) int64_t stallMs;

/**
 * The amount of time spent buffering that stalls playback after the first frame over the
 * amount of time spent playing the video. stallRatio = stallMs / (elapsedMs - stallMs)
 */
@property (nonatomic, readonly, nullable) NSNumber * stallRatio;

/**
 * The percent of time spent stalling over the total duration (since the first frame).
 * bufferingPercentage = stallMs / elapsedMs
 */
@property (nonatomic, readonly, nullable) NSNumber * bufferPercentage;

/** Height of the player view. This is the resolution of the device if the player is fullscreen. */
@property (nonatomic, readonly) int32_t playerResolutionHeight;

/** Width of the player view. This is the resolution of the device if the player is fullscreen. */
@property (nonatomic, readonly) int32_t playerResolutionWidth;

/** The name of the maximum resolution rendition which played during the stage */
@property (nonatomic, readonly, nonnull) NSString * maximumRendition;

/** The bitrate of the maximum rendition. */
@property (nonatomic, readonly) int32_t maximumRenditionBitrate;

/**
 * The highest resolution rendition with the longest duration (lexicographical max by duration,
 * then resolution)
 */
@property (nonatomic, readonly, nonnull) NSString * mostCommonRendition;

/** Set if the stage ends due to a timeout. */
@property (nonatomic, readonly, nullable) NSNumber * timeout;

/** List to track each player event that comes through. Each event is paired with the monotonic time (ms). */
@property (nonatomic, readonly, nonnull) NSArray<STVideoPlayerEventWithTime *> * playerEvents;

/**
 * List to track each stage event that comes through. Each event is paired with he monotonic time (ms).
 * stageEvents: list<Pair<Long, VideoStageListenerEvent>>;
 * Calculated mean bitrate ignoring startup and stall time.
 */
@property (nonatomic, readonly) int32_t meanIndicatedBitrate;

/** Tracks the intermediate stage error. */
@property (nonatomic, readonly, nullable) STVideoStageError * error;

@end
