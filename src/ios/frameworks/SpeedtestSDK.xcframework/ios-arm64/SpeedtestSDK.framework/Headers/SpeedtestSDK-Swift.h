#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef SPEEDTESTSDK_SWIFT_H
#define SPEEDTESTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <SpeedtestSDK/SpeedtestSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SpeedtestSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM_NAMED(NSInteger, STProviderDisplaySource, "ProviderDisplaySource", open) {
  STProviderDisplaySourceConfig = 0,
  STProviderDisplaySourceSimProviderIdDatabase = 3,
  STProviderDisplaySourceSimCarrierIdName = 8,
  STProviderDisplaySourceSimOperatorName = 9,
  STProviderDisplaySourceNetworkOperatorName = 10,
  STProviderDisplaySourceCarrierName = 11,
  STProviderDisplaySourceUnknown = -1,
};

@class STValidatedConfig;
@class STROoklaError;

@interface STConfig (SWIFT_EXTENSION(SpeedtestSDK))
- (void)validateWithCallback:(void (^ _Nonnull)(STValidatedConfig * _Nullable, STROoklaError * _Nullable))callback;
@end

@class NSData;
@class STServerSelection;

/// :nodoc:
SWIFT_PROTOCOL("_TtP12SpeedtestSDK23STConfigHandlerDelegate_")
@protocol STConfigHandlerDelegate <NSObject>
@optional
- (void)onConfigFetchStarted;
- (void)onConfigFetchFinished:(STValidatedConfig * _Nonnull)config;
- (void)onConfigFetchFailed:(STROoklaError * _Nonnull)error;
- (void)onConfigFetchFailedBinary:(NSData * _Nonnull)error;
- (void)onServerSelectionStarted;
- (void)onSelectionFinished:(NSArray<STServerSelection *> * _Nonnull)result;
- (void)onSelectionFailed:(NSArray<STServerSelection *> * _Nonnull)result;
@end

@class NSString;
@class STRAppData;
@class STRDeviceData;
@class STRConfig;
@class STRUserData;
@class STRUpload;
@class STRTransfer;
@class STRLatency;
@class STRPacketLoss;
@class STRHttpGet;
@class STRServerSelection;
@class STRTraceroutes;
@class STRStartEnd;
@class STRResultUpload;
@class STVVideoResult;

/// This represents the result of a test. It includes both configuration details, and results from various tasks.
SWIFT_CLASS_NAMED("STResult")
@interface STRResult : NSObject
/// Unique test GUID.
@property (nonatomic, readonly, copy) NSString * _Nonnull guid;
/// Application data.
@property (nonatomic, readonly, strong) STRAppData * _Nonnull app;
/// Data about the test device.
@property (nonatomic, readonly, strong) STRDeviceData * _Nonnull device;
/// Details about the configuration used for the test.
@property (nonatomic, readonly, strong) STRConfig * _Nonnull config;
/// User data.
@property (nonatomic, readonly, strong) STRUserData * _Nonnull user;
/// Upload transfer stage result.
@property (nonatomic, readonly, strong) STRUpload * _Nullable upload;
/// Download transfer stage result.
@property (nonatomic, readonly, strong) STRTransfer * _Nullable download;
/// HttpDownload transfer stage result.
@property (nonatomic, readonly, strong) STRTransfer * _Nullable httpDownload;
/// Latency stage result.
@property (nonatomic, readonly, strong) STRLatency * _Nullable latency;
/// Packetloss result.
@property (nonatomic, readonly, strong) STRPacketLoss * _Nullable packetLoss;
/// HttpGet stage result.
@property (nonatomic, readonly, strong) STRHttpGet * _Nullable httpGet;
/// Details about the server selection.
@property (nonatomic, readonly, strong) STRServerSelection * _Nullable serverSelection;
/// Traceroute result.
@property (nonatomic, readonly, strong) STRTraceroutes * _Nullable traceroute;
@property (nonatomic, readonly) id _Nullable supplementalData;
/// Network and telephony status at the start of the test.
@property (nonatomic, readonly, strong) STRStartEnd * _Nonnull start;
/// Network and telephony status at the end of the test.
@property (nonatomic, readonly, strong) STRStartEnd * _Nullable end;
/// Result for the saved result request.
@property (nonatomic, readonly, strong) STRResultUpload * _Nullable resultUpload;
@property (nonatomic, readonly) id _Nullable events;
@property (nonatomic, readonly, strong) STVVideoResult * _Nullable video;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRResult * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class NSDate;
@class NSNumber;
enum STRCoordinateSource : NSInteger;
enum STRLocationStatus : NSInteger;

/// Client location information.
SWIFT_CLASS_NAMED("Location")
@interface STRLocation : NSObject
/// Timestamp of when the location was acquired.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, strong) NSNumber * _Nullable ageMillis;
/// Altitude above sealevel.
/// note:
/// Only available of coordinate source is GPS.
@property (nonatomic, readonly) double altitude;
/// Accuracy of altitude measurement.
/// note:
/// Only available of coordinate source is GPS.
@property (nonatomic, readonly) double verticalAccuracy;
/// Source of device location.
@property (nonatomic, readonly) enum STRCoordinateSource coordinateSource;
/// Device latitude position.
@property (nonatomic, readonly) double latitude;
/// Device longitude position.
@property (nonatomic, readonly) double longitude;
/// Accuracy of latitude and longitude measurements.
/// note:
/// Only available of coordinate source is GPS.
@property (nonatomic, readonly) double horizontalAccuracy;
@property (nonatomic, readonly, strong) NSNumber * _Nullable course;
@property (nonatomic, readonly, strong) NSNumber * _Nullable courseAccuracy;
/// Timezone identifier.
/// note:
/// Only available of coordinate source is GPS.
@property (nonatomic, readonly, copy) NSString * _Nullable timezoneId;
@property (nonatomic, readonly, strong) NSNumber * _Nullable timezoneOffsetSeconds;
@property (nonatomic, readonly, strong) NSNumber * _Nullable floor;
/// Status of GPS location.
@property (nonatomic, readonly) enum STRLocationStatus status;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRLocation * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Latency measurement.
SWIFT_CLASS_NAMED("Latency")
@interface STRLatency : NSObject
/// Timestamp when this stage started.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// Duration of this stage.
@property (nonatomic, readonly) int64_t durationMicros;
/// Recorded latency in miliseconds.
@property (nonatomic, readonly) double timeMillis;
/// Jitter (latency variance) in milliseconds.
@property (nonatomic, readonly) double jitterMillis;
/// List of pings for the latency measurement
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull pings;
/// Error, if one occurred.
@property (nonatomic, readonly, strong) STROoklaError * _Nullable error;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRLatency * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Information about a network interface.
SWIFT_CLASS_NAMED("InterfaceInfo")
@interface STRInterfaceInfo : NSObject
/// Interface name, i.e en0 or eth1
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Internal IP address for the interface.
@property (nonatomic, readonly, copy) NSString * _Nonnull ip;
/// MAC address.
@property (nonatomic, readonly, copy) NSString * _Nonnull macaddr;
/// Whether or not this is a vpn / tunneled connection.
@property (nonatomic, readonly) BOOL isVpn;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRInterfaceInfo * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


SWIFT_CLASS_NAMED("HttpGetDuration")
@interface STRHttpGetDuration : NSObject
@property (nonatomic, readonly) int64_t total;
@property (nonatomic, readonly, strong) NSNumber * _Nullable dnsResolution;
@property (nonatomic, readonly, strong) NSNumber * _Nullable proxySelect;
@property (nonatomic, readonly, strong) NSNumber * _Nullable socketConnect;
@property (nonatomic, readonly, strong) NSNumber * _Nullable secureSocketConnect;
@property (nonatomic, readonly, strong) NSNumber * _Nullable requestHeader;
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseHeader;
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseBody;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRHttpGetDuration * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


SWIFT_CLASS_NAMED("HttpGetBytes")
@interface STRHttpGetBytes : NSObject
@property (nonatomic, readonly) int64_t headers;
@property (nonatomic, readonly) int64_t body;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRHttpGetBytes * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// HttpGet stage for 3rd party sdk
SWIFT_CLASS_NAMED("HttpGet")
@interface STRHttpGet : NSObject
/// Timestamp when this stage started.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, strong) STRHttpGetBytes * _Nullable bytes;
@property (nonatomic, readonly, strong) STRHttpGetDuration * _Nullable durationMs;
/// Error, if one occurred during the test
@property (nonatomic, readonly, strong) STROoklaError * _Nullable error;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRHttpGet * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, STRErrorType, "ErrorType", open) {
  STRErrorTypeUnknown = 0,
  STRErrorTypeLatencyFailed = 1,
  STRErrorTypeLatencyTcpFailed = 2,
  STRErrorTypeLatencyHttpFailed = 3,
  STRErrorTypeDownloadFailed = 4,
  STRErrorTypeUploadFailed = 5,
  STRErrorTypePacketLossFailed = 6,
  STRErrorTypeTracerouteFailed = 7,
  STRErrorTypeTracerouteCanceled = 8,
  STRErrorTypeTracerouteMissingHost = 9,
  STRErrorTypeTracerouteHopError = 10,
  STRErrorTypeTracerouteHopTimeout = 11,
  STRErrorTypeTracerouteHopMTUExceeded = 12,
  STRErrorTypeTracerouteHopHostUnreachable = 13,
  STRErrorTypeTracerouteHopNetworkUnreachable = 14,
  STRErrorTypeTracerouteHopPortUnreachable = 15,
  STRErrorTypeTracerouteHopUnreachable = 16,
  STRErrorTypeMetadataFailed = 17,
  STRErrorTypeServerInvalidState = 18,
  STRErrorTypeServerProtocolError = 19,
  STRErrorTypeServerDownloadFailed = 20,
  STRErrorTypeNotEnoughServers = 21,
  STRErrorTypeAddressLookupFailed = 22,
  STRErrorTypeInvalidConfig = 23,
  STRErrorTypeConnectionFailed = 24,
  STRErrorTypeBindToInterfaceFailed = 25,
  STRErrorTypeInvalidAddress = 26,
  STRErrorTypeInvalidSocket = 27,
  STRErrorTypeSocketReadFailed = 28,
  STRErrorTypeSocketWriteFailed = 29,
  STRErrorTypeProtocolError = 30,
  STRErrorTypeImplementationMissing = 31,
  STRErrorTypeSystemError = 32,
  STRErrorTypeGetAddrInfoError = 33,
  STRErrorTypeWindowsSocketsError = 34,
  STRErrorTypeCocoaError = 35,
  STRErrorTypeSdkNotInitialized = 36,
  STRErrorTypeGuidNotFound = 37,
  STRErrorTypeAppNotFound = 38,
  STRErrorTypeMissingMandatoryField = 39,
  STRErrorTypeSupplementalDataExceedsMaxLength = 40,
  STRErrorTypeBackgroundScanFailed = 41,
  STRErrorTypeResultFetchInvalidResponse = 42,
  STRErrorTypeResultFetchProtocolError = 43,
  STRErrorTypeResultFetchRequestFailed = 44,
  STRErrorTypeResultFetchUnexpectedResult = 45,
  STRErrorTypeResultFetchInternalError = 46,
  STRErrorTypeResultFetchRequestError = 47,
  STRErrorTypeResultFetchResultNotFound = 48,
  STRErrorTypeResultFetchInvalidApiKey = 49,
  STRErrorTypeConfigInvalidCredentials = 50,
  STRErrorTypeConfigInvalidParam = 51,
  STRErrorTypeConfigPermissionDenied = 52,
  STRErrorTypeConfigUnknownError = 53,
  STRErrorTypeConfigInternalError = 54,
  STRErrorTypeConfigNotFound = 55,
  STRErrorTypeConfigOtherError = 56,
  STRErrorTypeConfigServerSelectionFailed = 57,
  STRErrorTypeCocoaErrorAppTransportSecurityRequiresSecureConnection = 58,
  STRErrorTypeCocoaErrorBackgroundSessionInUseByAnotherProcess = 59,
  STRErrorTypeCocoaErrorBackgroundSessionRequiresSharedContainer = 60,
  STRErrorTypeCocoaErrorBackgroundSessionWasDisconnected = 61,
  STRErrorTypeCocoaErrorBadServerResponse = 62,
  STRErrorTypeCocoaErrorBadURL = 63,
  STRErrorTypeCocoaErrorCallIsActive = 64,
  STRErrorTypeCocoaErrorCancelled = 65,
  STRErrorTypeCocoaErrorCannotCloseFile = 66,
  STRErrorTypeCocoaErrorCannotConnectToHost = 67,
  STRErrorTypeCocoaErrorCannotCreateFile = 68,
  STRErrorTypeCocoaErrorCannotDecodeContentData = 69,
  STRErrorTypeCocoaErrorCannotDecodeRawData = 70,
  STRErrorTypeCocoaErrorCannotFindHost = 71,
  STRErrorTypeCocoaErrorCannotLoadFromNetwork = 72,
  STRErrorTypeCocoaErrorCannotMoveFile = 73,
  STRErrorTypeCocoaErrorCannotOpenFile = 74,
  STRErrorTypeCocoaErrorCannotParseResponse = 75,
  STRErrorTypeCocoaErrorCannotRemoveFile = 76,
  STRErrorTypeCocoaErrorCannotWriteToFile = 77,
  STRErrorTypeCocoaErrorClientCertificateRejected = 78,
  STRErrorTypeCocoaErrorClientCertificateRequired = 79,
  STRErrorTypeCocoaErrorDataLengthExceedsMaximum = 80,
  STRErrorTypeCocoaErrorDataNotAllowed = 81,
  STRErrorTypeCocoaErrorDNSLookupFailed = 82,
  STRErrorTypeCocoaErrorDownloadDecodingFailedMidStream = 83,
  STRErrorTypeCocoaErrorDownloadDecodingFailedToComplete = 84,
  STRErrorTypeCocoaErrorFileDoesNotExist = 85,
  STRErrorTypeCocoaErrorFileIsDirectory = 86,
  STRErrorTypeCocoaErrorFileOutsideSafeArea = 87,
  STRErrorTypeCocoaErrorHTTPTooManyRedirects = 88,
  STRErrorTypeCocoaErrorInternationalRoamingOff = 89,
  STRErrorTypeCocoaErrorNetworkConnectionLost = 90,
  STRErrorTypeCocoaErrorNoPermissionsToReadFile = 91,
  STRErrorTypeCocoaErrorNotConnectedToInternet = 92,
  STRErrorTypeCocoaErrorRedirectToNonExistentLocation = 93,
  STRErrorTypeCocoaErrorRequestBodyStreamExhausted = 94,
  STRErrorTypeCocoaErrorResourceUnavailable = 95,
  STRErrorTypeCocoaErrorSecureConnectionFailed = 96,
  STRErrorTypeCocoaErrorServerCertificateHasBadDate = 97,
  STRErrorTypeCocoaErrorServerCertificateHasUnknownRoot = 98,
  STRErrorTypeCocoaErrorServerCertificateNotYetValid = 99,
  STRErrorTypeCocoaErrorServerCertificateUntrusted = 100,
  STRErrorTypeCocoaErrorTimedOut = 101,
  STRErrorTypeCocoaErrorUnknown = 102,
  STRErrorTypeCocoaErrorUnsupportedURL = 103,
  STRErrorTypeCocoaErrorUserAuthenticationRequired = 104,
  STRErrorTypeCocoaErrorUserCancelledAuthentication = 105,
  STRErrorTypeCocoaErrorZeroByteResource = 106,
  STRErrorTypeInternalError = 107,
  STRErrorTypeInternalJsonError = 108,
  STRErrorTypeInternalMissingDataError = 109,
  STRErrorTypeInternalCharsetDecodeError = 110,
  STRErrorTypeInternalUnmarshallingError = 111,
  STRErrorTypeAndroidRuntimeException = 112,
  STRErrorTypeNsCocoaError = 113,
  STRErrorTypeHttpClient = 114,
  STRErrorTypeHttpConnectFailed = 115,
  STRErrorTypeHttpRequestFailed = 116,
  STRErrorTypeHttpResponseFailed = 117,
  STRErrorTypeHttpCallFailed = 118,
  STRErrorTypeNone = 119,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Used to retrieve information about a device, and such. Used internally only.
SWIFT_CLASS_NAMED("DeviceQueryResult")
@interface STRDeviceQueryResult : NSObject
/// Android report builds the whole report at end so we need both sections
@property (nonatomic, readonly, strong) STRStartEnd * _Nonnull start;
@property (nonatomic, readonly, strong) STRStartEnd * _Nonnull end;
@property (nonatomic, readonly, strong) STRDeviceData * _Nonnull device;
@property (nonatomic, readonly, strong) STRUserData * _Nonnull user;
@property (nonatomic, readonly) id _Nullable events;
@property (nonatomic, readonly, strong) STRAppData * _Nonnull app;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRDeviceQueryResult * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Information about the device the SDK is running on.
SWIFT_CLASS_NAMED("DeviceData")
@interface STRDeviceData : NSObject
/// Unique device identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// OS version number
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Device model
@property (nonatomic, readonly, copy) NSString * _Nonnull model;
/// SDK platform
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/// Detailed platform, if different from sdk platform.
@property (nonatomic, readonly, copy) NSString * _Nullable platformDetailed;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRDeviceData * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Detailed connection type, primarily useful for cellular connections.
typedef SWIFT_ENUM_NAMED(NSInteger, STRDetailedConnectionType, "DetailedConnectionType", open) {
  STRDetailedConnectionTypeUnknown = 0,
  STRDetailedConnectionTypeWifi = 1,
  STRDetailedConnectionTypeEthernet = 2,
  STRDetailedConnectionTypeBluetooth = 3,
  STRDetailedConnectionTypeUnknownCellular = 4,
  STRDetailedConnectionTypeGprs = 5,
  STRDetailedConnectionTypeEdge = 6,
  STRDetailedConnectionTypeWcdma = 7,
  STRDetailedConnectionTypeHsdpa = 8,
  STRDetailedConnectionTypeHsupa = 9,
  STRDetailedConnectionTypeCdma1x = 10,
  STRDetailedConnectionTypeCdmaEvdoRev0 = 11,
  STRDetailedConnectionTypeCdmaEvdoRevA = 12,
  STRDetailedConnectionTypeCdmaEvdoRevB = 13,
  STRDetailedConnectionTypeEhrpd = 14,
  STRDetailedConnectionTypeLte = 15,
  STRDetailedConnectionTypeNrnsa = 16,
  STRDetailedConnectionTypeNr = 17,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Source used to for device location.
typedef SWIFT_ENUM_NAMED(NSInteger, STRCoordinateSource, "CoordinateSource", open) {
  STRCoordinateSourceUnknown = 0,
  STRCoordinateSourceGps = 1,
  STRCoordinateSourceGeoIp = 2,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Connectivity details.
SWIFT_CLASS_NAMED("Connectivity")
@interface STRConnectivity : NSObject
/// Whether or not the client is connected to a VPN.
@property (nonatomic, readonly) BOOL isVpn;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRConnectivity * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

enum STRConnectionThreadingType : NSInteger;
enum STRConnectionSelectionMethod : NSInteger;

/// Connection information.
SWIFT_CLASS_NAMED("Connections")
@interface STRConnections : NSObject
/// Threading type used during the test.
@property (nonatomic, readonly) enum STRConnectionThreadingType mode;
/// Selection method for the threading type.
@property (nonatomic, readonly) enum STRConnectionSelectionMethod selectionMethod;
/// Whether or not the test was made over a VPN.
@property (nonatomic, readonly) BOOL isVpn;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRConnections * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Type of connection detected for the test.
typedef SWIFT_ENUM_NAMED(NSInteger, STRConnectionType, "ConnectionType", open) {
  STRConnectionTypeUnknown = 0,
  STRConnectionTypeCellular = 1,
  STRConnectionTypeWifi = 2,
  STRConnectionTypeEthernet = 3,
  STRConnectionTypeBluetooth = 4,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Connection type used during the test.
typedef SWIFT_ENUM_NAMED(NSInteger, STRConnectionThreadingType, "ConnectionThreadingType", open) {
  STRConnectionThreadingTypeMulti = 0,
  STRConnectionThreadingTypeSingle = 1,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Method used for selection the connection threading type.
typedef SWIFT_ENUM_NAMED(NSInteger, STRConnectionSelectionMethod, "ConnectionSelectionMethod", open) {
  STRConnectionSelectionMethodDefault = 0,
  STRConnectionSelectionMethodUser = 1,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STRConfigScaling;

/// Configuration for transfer tests.
SWIFT_CLASS_NAMED("ConfigTransfer")
@interface STRConfigTransfer : NSObject
/// Connection scaling configuration.
@property (nonatomic, readonly, strong) STRConfigScaling * _Nonnull scaling;
/// Number of connections to start with.
@property (nonatomic, readonly) int8_t startConns;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRConfigTransfer * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Early stop configuration
/// automatically selected, while manual means it was manually selected by
/// the user or application.
SWIFT_CLASS_NAMED("ConfigStop")
@interface STRConfigStop : NSObject
@property (nonatomic, readonly) int32_t femaPeriod;
@property (nonatomic, readonly) int32_t semaPeriod;
@property (nonatomic, readonly) int32_t stopCount;
@property (nonatomic, readonly) int32_t stopDelta;
@property (nonatomic, readonly) BOOL stopEnabled;
@property (nonatomic, readonly) BOOL reportEnabled;
@property (nonatomic, readonly) BOOL loggingEnabled;
@property (nonatomic, readonly) BOOL useAverageForStopCalculation;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRConfigStop * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Configuration values for connection scaling.
SWIFT_CLASS_NAMED("ConfigScaling")
@interface STRConfigScaling : NSObject
/// Whether or not it was enabled.
@property (nonatomic, readonly) BOOL enabled;
@property (nonatomic, readonly) int64_t estimatedWindowSize;
/// Maximum number of concurrent connections to use.
@property (nonatomic, readonly) int8_t maxConnections;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRConfigScaling * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

enum STRServerNetwork : NSInteger;
enum STRTestMethod : NSInteger;
@class STRServer;

/// Information about the configuration used for the test.
SWIFT_CLASS_NAMED("Config")
@interface STRConfig : NSObject
/// Test name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Test type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Server network type (0 is unknown, 1 is public server network, 2 is private server network)
@property (nonatomic, readonly) enum STRServerNetwork serverNetwork;
/// The tag is sometimes used to identify tests configured in a specific way.
/// It is usually empty.
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
/// Test method used for the test.
@property (nonatomic, readonly) enum STRTestMethod testMethod;
/// External ip address recorded for the client when downloading the configuration.
/// This can be separate than the addressed used for the actual test.
@property (nonatomic, readonly, copy) NSString * _Nonnull externalIp;
/// Date and time when the configuration was retrieved expressed according to ISO 8601.
@property (nonatomic, readonly, copy) NSDate * _Nullable retrievedAt;
/// Name of the ISP the client is connected with.
@property (nonatomic, readonly, copy) NSString * _Nonnull isp;
/// Config retrieval error, in cases of failure.
@property (nonatomic, readonly, strong) STROoklaError * _Nullable error;
/// Download transfer configuration.
@property (nonatomic, readonly, strong) STRConfigTransfer * _Nonnull download;
/// Upload transfer configuration
@property (nonatomic, readonly, strong) STRConfigTransfer * _Nonnull upload;
/// Early stop configuration.
@property (nonatomic, readonly, strong) STRConfigStop * _Nonnull stop;
/// Details about the primary test server used.
@property (nonatomic, readonly, strong) STRServer * _Nonnull server;
/// Connection configuration details.
@property (nonatomic, readonly, strong) STRConnections * _Nonnull connections;
@property (nonatomic, readonly, copy) NSString * _Nullable initiation;
@property (nonatomic, readonly, copy) NSString * _Nullable trigger;
/// Name of the provider for the connection - either carrier or ISP for non-celllular connections.
@property (nonatomic, readonly, copy) NSString * _Nullable providerDisplayName;
/// The source of the display provider name
@property (nonatomic, readonly) enum STProviderDisplaySource providerDisplaySource;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRConfig * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Cellular carrier information.
SWIFT_CLASS_NAMED("CarrierInfo")
@interface STRCarrierInfo : NSObject
/// Name of the primary carrier
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Detailed cellular connection type.
@property (nonatomic, readonly) enum STRDetailedConnectionType detailedConnectionType;
/// Mobile country code of the carrier.
@property (nonatomic, readonly, copy) NSString * _Nonnull mobileCountryCode;
/// Mobile network code of the carrier.
@property (nonatomic, readonly, copy) NSString * _Nonnull mobileNetworkCode;
/// ISO County code for the carrier.
@property (nonatomic, readonly, copy) NSString * _Nonnull isoCountryCode;
@property (nonatomic, readonly) BOOL allowsVOIP;
/// Whether or not this is the carrier used for the data connection.
@property (nonatomic, readonly) BOOL isDataServiceProvider;
/// Whether or not the carrier info was generated synthetically from config values.
@property (nonatomic, readonly) BOOL resolvedFromIpAddress;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRCarrierInfo * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Where upload speed was measured.
typedef SWIFT_ENUM_NAMED(NSInteger, STRBandwidthMeasureMethod, "BandwidthMeasureMethod", open) {
  STRBandwidthMeasureMethodServer = 0,
  STRBandwidthMeasureMethodClient = 1,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STRTraceroute;

/// Collection of all traceroutes.
SWIFT_CLASS_NAMED("Traceroutes")
@interface STRTraceroutes : NSObject
/// List of individual traceroute results.
@property (nonatomic, readonly, copy) NSArray<STRTraceroute *> * _Nonnull routes;
/// Traceroute timeout in milliseconds.
@property (nonatomic, readonly) int64_t timeoutMillis;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTraceroutes * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// WiFi information.
SWIFT_CLASS_NAMED("Wifi")
@interface STRWifi : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable bssid;
@property (nonatomic, readonly, copy) NSString * _Nullable ssid;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRWifi * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Information about the user.
SWIFT_CLASS_NAMED("UserData")
@interface STRUserData : NSObject
/// iOS Device identifier for advertising.
@property (nonatomic, readonly, copy) NSString * _Nullable idfa;
/// iOS device identifier for vendor.
@property (nonatomic, readonly, copy) NSString * _Nullable idfv;
@property (nonatomic, readonly) BOOL idfaEnabled;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRUserData * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Upload stage result.
SWIFT_CLASS_NAMED("Upload")
@interface STRUpload : NSObject
/// <ul>
///   <li>
///     Which bandwidth measurement method was used as the primary measurement method for uploads.
///   </li>
///   <li>
///     This is what gets reported during the test and indicates whether the client or server field is to be
///   </li>
///   <li>
///     considered the most valid value for the test.
///   </li>
/// </ul>
@property (nonatomic, readonly) enum STRBandwidthMeasureMethod primary;
/// Speed as measured on the server side. When available, this is preferred over the
/// client side measurement, as it is more accurate.
@property (nonatomic, readonly, strong) STRTransfer * _Nullable server;
/// Speed measured from the client side.
@property (nonatomic, readonly, strong) STRTransfer * _Nonnull client;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRUpload * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Early stop details for the test run.
SWIFT_CLASS_NAMED("TransferStop")
@interface STRTransferStop : NSObject
/// Speed measured by early stop algorithm.
@property (nonatomic, readonly) int64_t speedKbps;
/// Time elapsed before early stopped kicked in.,
@property (nonatomic, readonly) int64_t elapsedMillis;
/// Bytes transferred during the test.
@property (nonatomic, readonly) int64_t bytesTransferred;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTransferStop * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Connection scaling details for the test run.
SWIFT_CLASS_NAMED("TransferScaling")
@interface STRTransferScaling : NSObject
/// Number of connections used at the end of the test.
@property (nonatomic, readonly) int64_t finalConnections;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTransferScaling * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Data transfer test result for download or upload.  Incomplete data is present if the
/// stage was ended prematurely from error, or by being cancelled.
SWIFT_CLASS_NAMED("Transfer")
@interface STRTransfer : NSObject
/// Timestamp when this stage started.
@property (nonatomic, readonly, copy) NSDate * _Nullable timestamp;
/// Duration of this stage.
@property (nonatomic, readonly) int64_t durationMicros;
/// The speed measured in kilobits per second.
@property (nonatomic, readonly) int64_t speedKbps;
/// Total bytes transferred.
@property (nonatomic, readonly) int64_t bytesTransferred;
/// Number of connections that ended prematurely due to an error.
/// note:
/// A failed connection doesn’t mean the test failed.
@property (nonatomic, readonly) int64_t failedConnections;
@property (nonatomic, readonly, strong) NSNumber * _Nullable incompleteSpeedKbps;
@property (nonatomic, readonly, strong) NSNumber * _Nullable incompleteBytes;
@property (nonatomic, readonly, strong) NSNumber * _Nullable incompleteProgress;
/// Connections scaling information.
@property (nonatomic, readonly, strong) STRTransferScaling * _Nullable scaling;
/// Early stop information.
@property (nonatomic, readonly, strong) STRTransferStop * _Nullable stop;
/// Error, if one occurred during the test
@property (nonatomic, readonly, strong) STROoklaError * _Nullable error;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTransfer * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STRSDKInfo;

/// Information about the application.
SWIFT_CLASS_NAMED("AppData")
@interface STRAppData : NSObject
/// Version of the application used to take the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Name of the application name using the SDK,  i.e com.vendor.AppName.
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
/// SDK API Key.
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
/// SDK Identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// Information about the SDK used to take the test.
@property (nonatomic, readonly, strong) STRSDKInfo * _Nonnull sdk;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRAppData * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Traceroute hop state.
typedef SWIFT_ENUM_NAMED(NSInteger, STRTracerouteState, "TracerouteState", open) {
  STRTracerouteStateSuccess = 0,
  STRTracerouteStateTimeToLiveExceeded = 1,
  STRTracerouteStateError = 2,
  STRTracerouteStateErrorTimeout = 3,
  STRTracerouteStateMaximumTransmissionUnitExceeded = 4,
  STRTracerouteStateErrorHostUnreachable = 5,
  STRTracerouteStateErrorNetworkUnreachable = 6,
  STRTracerouteStateErrorPortUnreachable = 7,
  STRTracerouteStateErrorUnreachable = 8,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// An individual ping for a traceroute hop.
SWIFT_CLASS_NAMED("TracerouteHost")
@interface STRTracerouteHost : NSObject
/// IP Address recorded for the op.
@property (nonatomic, readonly, copy) NSString * _Nonnull ip;
/// Roundtrip time in microseconds.
@property (nonatomic, readonly) int64_t timeMicros;
/// Recorded maximum transmission unit. Not always available.
@property (nonatomic, readonly) int32_t mtu;
/// Return TTL. Not always available.
@property (nonatomic, readonly) int32_t rttl;
/// Traceroute state.
@property (nonatomic, readonly) enum STRTracerouteState state;
/// Error, if one occurred.
@property (nonatomic, readonly, strong) STROoklaError * _Nullable error;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTracerouteHost * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// An individual traceroute hop representing all pings (hosts) with the same TTL value.
/// note:
/// Individual TracerouteHost entries might show different ip addresses due to
/// load balancing or similar path changes.
SWIFT_CLASS_NAMED("TracerouteHop")
@interface STRTracerouteHop : NSObject
/// TTL used for the hop.
@property (nonatomic, readonly) int32_t ttl;
/// Result for each ping in the hop.
@property (nonatomic, readonly, copy) NSArray<STRTracerouteHost *> * _Nonnull pings;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTracerouteHop * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// The result from a traceroute.
SWIFT_CLASS_NAMED("Traceroute")
@interface STRTraceroute : NSObject
/// Destination ip address.
@property (nonatomic, readonly, copy) NSString * _Nonnull ip;
/// Destination host name.
@property (nonatomic, readonly, copy) NSString * _Nonnull host;
/// Recorded hops for the traceroute.
@property (nonatomic, readonly, copy) NSArray<STRTracerouteHop *> * _Nonnull hops;
/// Error code, if one occurred.
@property (nonatomic, readonly) int32_t errorCode;
/// Error message, if one occurred.
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
/// Total time elapsed for the traceroute, in microseconds.
@property (nonatomic, readonly) int64_t elapsedMicros;
/// Information about the interface used for the traceroute.
@property (nonatomic, readonly, strong) STRInterfaceInfo * _Nonnull interfaceInfo;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTraceroute * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Method used for the test.
typedef SWIFT_ENUM_NAMED(NSInteger, STRTestMethod, "TestMethod", open) {
  STRTestMethodTcp = 0,
  STRTestMethodHttp = 1,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// This is internal only.
SWIFT_CLASS_NAMED("Telephony")
@interface STRTelephony : NSObject
@property (nonatomic, readonly, copy) NSArray<STRCarrierInfo *> * _Nonnull serviceSubscriberCellularProviders;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRTelephony * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, STRStoredResultConnectionType, "StoredResultConnectionType", open) {
  STRStoredResultConnectionTypeUnknown = 0,
  STRStoredResultConnectionTypeUnknownCellular = 1,
  STRStoredResultConnectionTypeWifi = 2,
  STRStoredResultConnectionTypeGprs = 3,
  STRStoredResultConnectionTypeEdge = 4,
  STRStoredResultConnectionTypeWcdma = 5,
  STRStoredResultConnectionTypeHsdpa = 6,
  STRStoredResultConnectionTypeHsupa = 7,
  STRStoredResultConnectionTypeCdma1x = 8,
  STRStoredResultConnectionTypeCdmaEvdoRev0 = 9,
  STRStoredResultConnectionTypeCdmaEvdoRevA = 10,
  STRStoredResultConnectionTypeEhrpd = 11,
  STRStoredResultConnectionTypeLte = 12,
  STRStoredResultConnectionTypeEthernet = 13,
  STRStoredResultConnectionTypeBluetooth = 14,
  STRStoredResultConnectionTypeCdmaEvdoRevB = 16,
  STRStoredResultConnectionTypeNrnsa = 17,
  STRStoredResultConnectionTypeNr = 18,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


SWIFT_CLASS_NAMED("StoredResult")
@interface STRStoredResult : NSObject
/// For iOS, this is the bundle identifier. For Android this represents the application’s package name
@property (nonatomic, readonly, copy) NSString * _Nonnull appName;
/// The version of the application itself that the SDK is encapsulated within,
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersion;
/// Country name based on the clients location during the test.1
@property (nonatomic, readonly, copy) NSString * _Nonnull countryName;
@property (nonatomic, readonly, strong) NSNumber * _Nullable downloadMbps;
/// Device location latitude at the end of the test
@property (nonatomic, readonly) float endLatitude;
/// The source of the device location at the start of the test.
@property (nonatomic, readonly) enum STRCoordinateSource endLocationType;
/// Device location longitude at the end of the test
@property (nonatomic, readonly) float endLongitude;
/// Unique randomly generated ID for the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull guid;
/// The IP address of the client
@property (nonatomic, readonly, copy) NSString * _Nonnull ipAddress;
/// Name of the ISP used when taking the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull ispName;
@property (nonatomic, readonly, strong) NSNumber * _Nullable jitter;
@property (nonatomic, readonly, strong) NSNumber * _Nullable latency;
@property (nonatomic, readonly, strong) NSNumber * _Nullable mcc;
@property (nonatomic, readonly, strong) NSNumber * _Nullable mnc;
/// The model name of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull model;
/// The name of the network operator.
@property (nonatomic, readonly, copy) NSString * _Nullable networkOperatorName;
/// The iOS version number of the device the test was taken on.
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
@property (nonatomic, readonly, strong) NSNumber * _Nullable plossRecv;
@property (nonatomic, readonly, strong) NSNumber * _Nullable plossSent;
@property (nonatomic, readonly, strong) NSNumber * _Nullable ploss;
/// Connection type at the end of the test
@property (nonatomic, readonly) enum STRStoredResultConnectionType postConnectionType;
/// Connection type at the beginning of the test
@property (nonatomic, readonly) enum STRStoredResultConnectionType preConnectionType;
/// Region name based on the clients location during the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull regionName;
/// Time and date when the test was performed.
@property (nonatomic, readonly, copy) NSDate * _Nonnull resultDate;
/// Version of the Speedtest SDK used to perform the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Test server id used for the test.
@property (nonatomic, readonly) int32_t serverId;
/// Name of the server used for the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull serverName;
/// Name of the server sponsor.
@property (nonatomic, readonly, copy) NSString * _Nonnull serverSponsorName;
/// Device location latitude at the start of the test
@property (nonatomic, readonly) float startLatitude;
/// The source of the device location at the end of the test.
@property (nonatomic, readonly) enum STRCoordinateSource startLocationType;
/// Device location longitude at the start of the test
@property (nonatomic, readonly) float startLongitude;
@property (nonatomic, readonly) id _Nullable supplementalData;
@property (nonatomic, readonly, strong) NSNumber * _Nullable uploadMbps;
/// A formatted full place hierarchy useful for showing the location in a UI. Is not granular to the street address, just the city or region.
@property (nonatomic, readonly, copy) NSString * _Nullable formattedAddress;
/// The most granular representation for the place. This is usually the city name.
@property (nonatomic, readonly, copy) NSString * _Nullable placeName;
/// The type associated with the given placeName
@property (nonatomic, readonly, copy) NSString * _Nullable placeType;
/// Component of the place hierarchy for the result. These are fields we derive and vary depending on the location. Region is the top level parent (excluding country), subregion is the 2nd parent, etc. Typically, this is “administrative_area_level_2”
@property (nonatomic, readonly, copy) NSString * _Nullable subregion;
/// Component of the place hierarchy for the result. These are fields we derive and vary depending on the location. Region is the top level parent (excluding country), subregion is the 2nd parent, etc. Typically, this is “administrative_area_level_3”.
@property (nonatomic, readonly, copy) NSString * _Nullable subSubregion;
/// Postal code where the test was taken.
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRStoredResult * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STRNetwork;

/// Network and connections state at the start and end of a test run.
SWIFT_CLASS_NAMED("StartEnd")
@interface STRStartEnd : NSObject
/// Connectivity information.
@property (nonatomic, readonly, strong) STRConnectivity * _Nonnull connectivity;
/// Network and carrier information.
@property (nonatomic, readonly, strong) STRNetwork * _Nonnull network;
/// Device location information.
@property (nonatomic, readonly, strong) STRLocation * _Nonnull location;
/// Telephony details.
@property (nonatomic, readonly, strong) STRTelephony * _Nonnull telephony;
/// Timestamp when the data was collected.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRStartEnd * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Method used for selecting the server used for the test
typedef SWIFT_ENUM_NAMED(NSInteger, STRServerSelectionMethod, "ServerSelectionMethod", open) {
  STRServerSelectionMethodAuto = 0,
  STRServerSelectionMethodManual = 1,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Details about the server selection.
SWIFT_CLASS_NAMED("ServerSelection")
@interface STRServerSelection : NSObject
@property (nonatomic, readonly) id _Nullable closestPingDetails;
/// ID of the selected server.
@property (nonatomic, readonly) int32_t closestServerId;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRServerSelection * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, STRServerNetwork, "ServerNetwork", open) {
  STRServerNetworkUnknown = 0,
  STRServerNetworkPublic = 1,
  STRServerNetworkPrivate = 2,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Server DNS information
SWIFT_CLASS_NAMED("ServerDNS")
@interface STRServerDNS : NSObject
/// IP address of the server.
@property (nonatomic, readonly, copy) NSString * _Nonnull ip;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRServerDNS * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Test server endpoint information
SWIFT_CLASS_NAMED("Server")
@interface STRServer : NSObject
/// Unique server id.
@property (nonatomic, readonly) int32_t id;
/// DNS information
@property (nonatomic, readonly, strong) STRServerDNS * _Nonnull dns;
/// Method uses to select this server.
@property (nonatomic, readonly) enum STRServerSelectionMethod selectionMethod;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRServer * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Information about the SDK used to take the test.
SWIFT_CLASS_NAMED("SDKInfo")
@interface STRSDKInfo : NSObject
/// SDK version.
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// SDK Commit hash.
@property (nonatomic, readonly, copy) NSString * _Nonnull commit;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRSDKInfo * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, STRResultUploadStatusCode, "ResultUploadStatusCode", open) {
  STRResultUploadStatusCodeOk = 0,
  STRResultUploadStatusCodeError = 1,
};


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// The server’s response for the result upload after the test.
SWIFT_CLASS_NAMED("ResultUploadResponse")
@interface STRResultUploadResponse : NSObject
/// The unique guid of the result.
@property (nonatomic, readonly, copy) NSString * _Nullable guid;
/// Received errors, if any.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable error;
@property (nonatomic, readonly) id _Nullable save;
/// Status code string.
@property (nonatomic, readonly) enum STRResultUploadStatusCode status;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRResultUploadResponse * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Result for the saved result request.
SWIFT_CLASS_NAMED("ResultUpload")
@interface STRResultUpload : NSObject
/// Raw server response, including error message from the server.
@property (nonatomic, readonly, strong) STRResultUploadResponse * _Nullable response;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull errors;
/// HTTP response code for the request.
@property (nonatomic, readonly) int32_t httpStatusCode;
/// Whether or not the request is a success.
@property (nonatomic, readonly) BOOL didSucceed;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRResultUpload * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// This represents the result of a background scan
SWIFT_CLASS_NAMED("ResultBackgroundScan")
@interface STRResultBackgroundScan : NSObject
/// Unique test GUID.
@property (nonatomic, readonly, copy) NSString * _Nonnull guid;
/// Schema revision.
@property (nonatomic, readonly) int32_t schemaRevision;
/// Application data.
@property (nonatomic, readonly, strong) STRAppData * _Nonnull app;
@property (nonatomic, readonly) id _Nonnull device;
@property (nonatomic, readonly) id _Nonnull config;
@property (nonatomic, readonly) id _Nonnull user;
@property (nonatomic, readonly) id _Nonnull start;
@property (nonatomic, readonly, copy) NSArray * _Nonnull events;
@property (nonatomic, readonly) id _Nullable supplementalData;
/// Result for the saved result request.
@property (nonatomic, readonly, strong) STRResultUpload * _Nullable resultUpload;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRResultBackgroundScan * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Packet loss measured during the test. This is measured using UDP packets sent
/// from the client to the server, and is not always available.
SWIFT_CLASS_NAMED("PacketLoss")
@interface STRPacketLoss : NSObject
/// Number of sent packages.
@property (nonatomic, readonly) int16_t sent;
/// Number of packages received by the server.
@property (nonatomic, readonly) int16_t received;
/// Max packet id seen by the server.
@property (nonatomic, readonly) int16_t maxIdReceived;
/// Number of duplicate packages seen by the server.
@property (nonatomic, readonly) int16_t duplicatePackets;
/// Packet loss percentage.
@property (nonatomic, readonly) double lost;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRPacketLoss * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


SWIFT_CLASS_NAMED("OoklaError")
@interface STROoklaError : NSObject
@property (nonatomic, readonly) int64_t code;
@property (nonatomic, readonly) enum STRErrorType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSArray<STROoklaError *> * _Nullable causes;
@property (nonatomic, readonly) id _Nullable extraInfo;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STROoklaError * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Network details.
SWIFT_CLASS_NAMED("Network")
@interface STRNetwork : NSObject
/// Detailed connection type string.
@property (nonatomic, readonly) enum STRDetailedConnectionType connectionDetailedType;
/// ISO country code of the primary carrier.
@property (nonatomic, readonly, copy) NSString * _Nonnull isoCountryCode;
/// Mobile country code of the primary carrier.
@property (nonatomic, readonly, copy) NSString * _Nonnull mobileCountryCode;
/// Mobiile network code of the primary carrier.
@property (nonatomic, readonly, copy) NSString * _Nonnull mobileNetworkCode;
/// Whether or not the carrier was resolved from IP address.
@property (nonatomic, readonly) BOOL carrierResolvedFromIpAddress;
/// Local ip address on the interface used for the connection.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceIpAddress;
/// External device ip address for the interface used during the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull externalIpAddress;
/// WiFi information, if available.
@property (nonatomic, readonly, strong) STRWifi * _Nullable wifi;
/// Primary carrier name.
@property (nonatomic, readonly, copy) NSString * _Nonnull carrier;
/// Connection type used for the test.
@property (nonatomic, readonly) enum STRConnectionType connectionType;
/// Name of the interface used for the test.
@property (nonatomic, readonly, copy) NSString * _Nonnull interfaceName;
/// Detailed cellular connection type.
@property (nonatomic, readonly) enum STRDetailedConnectionType cellularDetailedType;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STRNetwork * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STRResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, STRLocationStatus, "LocationStatus", open) {
  STRLocationStatusUndetermined = 0,
  STRLocationStatusUnknown = 1,
  STRLocationStatusDenied = 2,
  STRLocationStatusAvailable = 3,
  STRLocationStatusError = 4,
};


@protocol STScheduler;

SWIFT_CLASS("_TtC12SpeedtestSDK18STSchedulerFactory") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface STSchedulerFactory : NSObject
+ (id <STScheduler> _Nonnull)newPeriodicScheduler:(int64_t)periodSeconds delaySeconds:(int64_t)delaySeconds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12SpeedtestSDK17STSpeedtestResult")
@interface STSpeedtestResult : NSObject
- (STRResult * _Nonnull)getResult SWIFT_WARN_UNUSED_RESULT;
/// Get the connection type that was used at the start of the test.
- (enum STRConnectionType)getStartConnectionType SWIFT_WARN_UNUSED_RESULT;
/// Get the connection type that was used at the end of the test.
- (enum STRConnectionType)getEndConnectionType SWIFT_WARN_UNUSED_RESULT;
/// Get the name of the internet service provider for the connection at the start of the test.
- (NSString * _Nonnull)getISPName SWIFT_WARN_UNUSED_RESULT;
/// Get information about the mobile carrier used for taking the test, if available.
- (NSArray<STRCarrierInfo *> * _Nonnull)getCarrierInfo SWIFT_WARN_UNUSED_RESULT;
/// Get the location of the device at the start of the test.
- (STRLocation * _Nonnull)getStartLocation SWIFT_WARN_UNUSED_RESULT;
/// Get the location of the device at the end of the test.
- (STRLocation * _Nullable)getEndLocation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol STLogHandler;
@protocol STTestHandler;
@class STTaskManager;

SWIFT_CLASS("_TtC12SpeedtestSDK14STSpeedtestSDK")
@interface STSpeedtestSDK : NSObject
/// Return the SDK singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STSpeedtestSDK * _Nonnull sharedInstance;)
+ (STSpeedtestSDK * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK with the specified api key and options.
/// note:
/// Can only be called once on application start.
- (BOOL)initSDKWithAPIKey:(NSString * _Nonnull)apiKey options:(STSpeedtestOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none);
- (BOOL)initSDKWithAPIKey:(NSString * _Nonnull)apiKey error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none);
/// Configure a log handler. This will allow log messages from the SDK to be printed or collected.
/// precondition:
/// SDK must have been initialized before calling this method.
- (BOOL)setLogHandler:(id <STLogHandler> _Nullable)handler error:(NSError * _Nullable * _Nullable)error;
/// Create a new task manager with the specified <code>TestHandler</code> and <code>ValidatedConfig</code>.
/// precondition:
/// SDK must have been initialized before calling this method.
/// This one requires the <code>TestHandler</code> to manually proceed between different throughput tasks
/// (latency, upload, download), in case you need to do animations between stages.
- (STTaskManager * _Nullable)newTaskManager:(id <STTestHandler> _Nullable)testHandler config:(STValidatedConfig * _Nullable)config error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create a new task manager with the specified <code>TestHandler</code> and <code>ValidatedConfig</code>.
/// precondition:
/// SDK must have been initialized before calling this method.
/// This one automatically proceeds between different throughput tasks (latency, upload, download).
- (STTaskManager * _Nullable)newTaskManagerWithAutoAdvance:(id <STTestHandler> _Nullable)testHandler config:(STValidatedConfig * _Nullable)config error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Asynchronously fetch the result for a completed test.
/// precondition:
/// SDK must have been initialized before calling this method.
/// \param resultGuid the guid from a completed test.
///
/// \param resultKey the API key for the result API.
///
/// \param callback this is called when the result fetching has completed.
///
- (void)fetchResultWithGUID:(NSString * _Nonnull)resultGuid resultKey:(NSString * _Nonnull)resultKey callback:(void (^ _Nonnull)(STRStoredResult * _Nullable, STROoklaError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class STTaskManagerController;
@class STThroughputResult;
@class STPacketlossResult;
@class STLatencyResult;
@class STTransferResult;

SWIFT_PROTOCOL("_TtP12SpeedtestSDK21STTestHandlerDelegate_")
@protocol STTestHandlerDelegate <NSObject>
- (void)onResultUploadFinishedWithResult:(STRResultUpload * _Nullable)result :(STROoklaError * _Nullable)error;
- (void)onTestFinished:(STSpeedtestResult * _Nonnull)result;
@optional
- (void)onTestStarted:(STTaskManagerController * _Nullable)taskController;
- (void)onTestCanceled;
- (void)onTestFailed:(STROoklaError * _Nonnull)error result:(STSpeedtestResult * _Nullable)result;
- (void)onThroughputTaskStarted:(STTaskManagerController * _Nullable)taskController remoteIp:(NSString * _Nonnull)remoteIp localIp:(NSString * _Nonnull)localIp;
- (void)onThroughputStageStarted:(STTaskManagerController * _Nullable)taskController stage:(STThroughputStage)stage;
- (void)onThroughputStageFailed:(STROoklaError * _Nullable)error stage:(STThroughputStage)stage result:(STSpeedtestResult * _Nullable)result;
- (void)onThroughputStageFinished:(STTaskManagerController * _Nullable)taskController stage:(STThroughputStage)stage;
- (void)onThroughputTaskFinished:(STTaskManagerController * _Nullable)taskController result:(STThroughputResult * _Nonnull)result;
- (void)onPacketlossFinished:(STTaskManagerController * _Nullable)taskController result:(STPacketlossResult * _Nonnull)result;
- (void)onLatencyProgressUpdated:(STLatencyResult * _Nonnull)result progressPercentage:(float)progressPercentage;
- (void)onLatencyFinished:(STTaskManagerController * _Nullable)taskController result:(STLatencyResult * _Nonnull)result;
- (void)onDownloadProgressUpdated:(STTransferResult * _Nonnull)result progressPercentage:(float)progressPercentage;
- (void)onDownloadFinished:(STTaskManagerController * _Nullable)taskController result:(STTransferResult * _Nonnull)result;
- (void)onUploadProgressUpdated:(STTransferResult * _Nonnull)result progressPercentage:(float)progressPercentage;
- (void)onUploadFinished:(STTaskManagerController * _Nullable)taskController result:(STTransferResult * _Nonnull)result;
- (void)onTracerouteStarted:(STTaskManagerController * _Nullable)taskController host:(NSString * _Nonnull)host ip:(NSString * _Nonnull)ip;
- (void)onTracerouteHop:(NSString * _Nonnull)host hop:(STRTracerouteHop * _Nonnull)hop;
- (void)onTracerouteFinished:(STTaskManagerController * _Nullable)taskController host:(NSString * _Nonnull)host traceroute:(STRTraceroute * _Nonnull)traceroute;
- (void)onTracerouteFailed:(STROoklaError * _Nonnull)error host:(NSString * _Nonnull)host traceroute:(STRTraceroute * _Nullable)traceroute;
- (void)onTracerouteCanceled:(NSString * _Nonnull)host;
@end

@class STVUserResult;
@class STVResolution;
@class STVStageResult;
@class STVVideo;
@class STVVideoError;

/// Video test result. Contains all of the information about the test.
SWIFT_CLASS_NAMED("STVideoResult")
@interface STVVideoResult : NSObject
/// Summary of the results displayed to the user at end of test.
@property (nonatomic, readonly, strong) STVUserResult * _Nullable userResult;
/// Dimensions of the view used to play the test at the beginning of the test.
@property (nonatomic, readonly, strong) STVResolution * _Nonnull resolution;
/// Results of the stages ran during the test.
@property (nonatomic, readonly, copy) NSArray<STVStageResult *> * _Nonnull stages;
/// Configured assets used to run the test.
@property (nonatomic, readonly, copy) NSArray<STVVideo *> * _Nonnull videos;
/// Error if the video test failed.
@property (nonatomic, readonly, strong) STVVideoError * _Nullable error;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVVideoResult * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

enum STVTestQuality : NSInteger;

/// Summary of the results displayed to the user at end of test - this model is used for complete video tests.
SWIFT_CLASS_NAMED("UserResult")
@interface STVUserResult : NSObject
/// Because ABR does not behave as previously thought, the fixed stage is going to be run regardless for now. This field captures the result of the completed test shown to the user.
@property (nonatomic, readonly) enum STVTestQuality testQuality;
/// The max resolution displayed to the user at the end of the test. This is the highest fixed[stage].rendition where fixed[stage].advanceCriteriaMet is true for that stage.
/// If no fixed stages met the advance criteria, this is the adaptive.majorityRendition.
@property (nonatomic, readonly, copy) NSString * _Nonnull maxResolution;
/// The buffering percent displayed at the end of the test. The amount of time spent buffering that stalls playback over the amount of time spent during the stage.
/// stallPercentage = stallMs / elapsedMs. Currently 1 for 1 with adaptive.stallPercentage.
@property (nonatomic, readonly) float stallPercentage;
/// The load time displayed at the end of the test. Currently 1 for 1 with adaptive.timeToFirstFrameMs.
@property (nonatomic, readonly) int32_t loadTimeMs;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVUserResult * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Type of error that could have occurred.
typedef SWIFT_ENUM_NAMED(NSInteger, STVVideoErrorType, "VideoErrorType", open) {
  STVVideoErrorTypeNoConfig = 0,
  STVVideoErrorTypeNoPlaylist = 1,
  STVVideoErrorTypeInvalidConfig = 2,
  STVVideoErrorTypePlayerError = 3,
  STVVideoErrorTypeUserCancel = 4,
  STVVideoErrorTypeUserBackground = 5,
  STVVideoErrorTypeStartTimeout = 6,
  STVVideoErrorTypeTimeout = 7,
  STVVideoErrorTypeUnknown = 8,
};


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STVSubError;

/// Error of a failed video test
SWIFT_CLASS_NAMED("VideoError")
@interface STVVideoError : NSObject
/// Type of error.
@property (nonatomic, readonly) enum STVVideoErrorType type;
/// Message attached to the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Any sub errors that could have caused the error.
@property (nonatomic, readonly, copy) NSArray<STVSubError *> * _Nullable suberrors;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVVideoError * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STVRendition;

/// A video the test could have played
SWIFT_CLASS_NAMED("Video")
@interface STVVideo : NSObject
/// Identifier of the video.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// List of renditions in the video.
@property (nonatomic, readonly, copy) NSArray<STVRendition *> * _Nonnull renditions;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVVideo * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// A stage type. Either fixed or adaptive.
typedef SWIFT_ENUM_NAMED(NSInteger, STVStageType, "StageType", open) {
  STVStageTypeAdaptive = 0,
  STVStageTypeFixed = 1,
};


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Url of the asset played during the stage.
SWIFT_CLASS_NAMED("AssetUrl")
@interface STVAssetUrl : NSObject
/// Identifier of the asset URL.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Display name of the asset URL.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// URL of the asset.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVAssetUrl * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// A potential cause for an error.
SWIFT_CLASS_NAMED("SubError")
@interface STVSubError : NSObject
/// The description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVSubError * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

@class STVStageEvent;
@class STVStageError;

/// Result of a video test stage. Contains information about the stage.
SWIFT_CLASS_NAMED("StageResult")
@interface STVStageResult : NSObject
/// The type of stage that ran.
@property (nonatomic, readonly) enum STVStageType type;
/// URL of the asset played with metadata.
@property (nonatomic, readonly, strong) STVAssetUrl * _Nonnull url;
/// The colocation of the asset in the selected CDN
@property (nonatomic, readonly, copy) NSString * _Nullable colo;
@property (nonatomic, readonly, strong) NSNumber * _Nullable elapsedMs;
@property (nonatomic, readonly, strong) NSNumber * _Nullable timeToFirstFrameMs;
@property (nonatomic, readonly, strong) NSNumber * _Nullable stallMs;
@property (nonatomic, readonly, strong) NSNumber * _Nullable stallRatio;
@property (nonatomic, readonly, strong) NSNumber * _Nullable stallPercentage;
@property (nonatomic, readonly) BOOL advanceCriteriaMet;
/// The adaptive events during this stage of the test.
@property (nonatomic, readonly, copy) NSArray<STVStageEvent *> * _Nonnull events;
/// Represents the state of the failure shown to the user for that stage. Does always result in top level error.
@property (nonatomic, readonly, strong) STVStageError * _Nullable error;
/// Name of the video the rendition came from
@property (nonatomic, readonly, copy) NSString * _Nonnull video;
/// Fixed only. Rendition used for the fixed bit rate test.
@property (nonatomic, readonly, copy) NSString * _Nullable rendition;
@property (nonatomic, readonly, strong) NSNumber * _Nullable meanBitrate;
@property (nonatomic, readonly, strong) NSNumber * _Nullable meanIndicatedBitrate;
@property (nonatomic, readonly, strong) NSNumber * _Nullable renditionShifts;
/// Adaptive only. First rendition played.
@property (nonatomic, readonly, copy) NSString * _Nullable startRendition;
/// Adaptive only. Last successful rendition played.
@property (nonatomic, readonly, copy) NSString * _Nullable endRendition;
/// Adaptive only. The rendition that played the majority of the time for the ABR stage.
@property (nonatomic, readonly, copy) NSString * _Nullable majorityRendition;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVStageResult * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Type of event for a stage.
typedef SWIFT_ENUM_NAMED(NSInteger, STVStageEventType, "StageEventType", open) {
  STVStageEventTypeCancel = 0,
  STVStageEventTypeComplete = 1,
  STVStageEventTypeFailure = 2,
  STVStageEventTypeFirstFrame = 3,
  STVStageEventTypePreplayBuffer = 4,
  STVStageEventTypeRenditionShift = 5,
  STVStageEventTypeResume = 6,
  STVStageEventTypeStalling = 7,
  STVStageEventTypeStart = 8,
};


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Event emitted during a video stage.
SWIFT_CLASS_NAMED("StageEvent")
@interface STVStageEvent : NSObject
@property (nonatomic, readonly) enum STVStageEventType type;
@property (nonatomic, readonly, strong) NSNumber * _Nullable elapsedMs;
@property (nonatomic, readonly, strong) NSNumber * _Nullable bitrate;
/// Rendition during this event. A bitrateShift event will change the rendition.
@property (nonatomic, readonly, copy) NSString * _Nullable rendition;
/// Event start time expressed as monotonic time in milliseconds elapsed since an arbitrary point in time that is not linked to the system clock. Values come from SystemClock.elapsedRealtime() on Android and NSProcessInfo.processInfo.systemUptime on iOS.
@property (nonatomic, readonly) int64_t startTimestamp;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVStageEvent * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Type of error that occurred during a stage.
typedef SWIFT_ENUM_NAMED(NSInteger, STVStageErrorType, "StageErrorType", open) {
  STVStageErrorTypePlayerError = 0,
  STVStageErrorTypeUserCancel = 1,
  STVStageErrorTypeUserBackground = 2,
  STVStageErrorTypeStartTimeout = 3,
  STVStageErrorTypeTimeout = 4,
  STVStageErrorTypeUnknown = 5,
};


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// Represents the state of the failure shown to the user for that stage.
SWIFT_CLASS_NAMED("StageError")
@interface STVStageError : NSObject
/// The type of error
@property (nonatomic, readonly) enum STVStageErrorType type;
/// A message describing the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Any suberrors that may have caused the error.
@property (nonatomic, readonly, copy) NSArray<STVSubError *> * _Nullable subErrors;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVStageError * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// A pair of dimensions representing a resolution.
SWIFT_CLASS_NAMED("Resolution")
@interface STVResolution : NSObject
@property (nonatomic, readonly) int32_t widthPx;
@property (nonatomic, readonly) int32_t heightPx;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVResolution * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end

/// Quality of the test as calculated by our methodology.
typedef SWIFT_ENUM_NAMED(NSInteger, STVTestQuality, "TestQuality", open) {
  STVTestQualityGood = 0,
  STVTestQualityBad = 1,
};


@interface STVVideoResult (SWIFT_EXTENSION(SpeedtestSDK))
@end


/// A rendition within a video.
SWIFT_CLASS_NAMED("Rendition")
@interface STVRendition : NSObject
/// Identifier of the rendition.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The common name of the rendition (720p, 1440p, 4K, etc).
@property (nonatomic, readonly, copy) NSString * _Nonnull commonName;
/// Resolution of the rendition with values in pixels.
@property (nonatomic, readonly, strong) STVResolution * _Nonnull resolution;
/// Bitrate of the rendition.
@property (nonatomic, readonly) int32_t bitrate;
/// Serialize the object tree as json.
///
/// throws:
/// exception if there is non-serializable data in the object tree.
- (NSData * _Nullable)toJsonWithPretty:(BOOL)pretty error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse json and try to deserialize into the object.
///
/// throws:
/// exception If the json format doesn’t match the object.
+ (STVRendition * _Nullable)parseWithJson:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
